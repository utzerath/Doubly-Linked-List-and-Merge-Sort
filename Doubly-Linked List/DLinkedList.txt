//Lydia K Fritz
//2/14/2019
//Provided C++ DLinkedList

#pragma once

#ifndef DLINKLIST_H
#define DLINKLIST_H

#include <iostream>

using namespace std;

template <class T>
class DLinkedList 
{

	//PROVIDED
	friend ostream& operator<<(ostream& out, const DLinkedList<T>& rhs) 
	{
		DNode* curr = rhs.header->next;
		while (curr != rhs.header) {
			out << curr->data << " ";
			curr = curr->next;
		}
		return out;
	}

public:

	//inner class DNode PROVIDED
	class DNode {
	public:
		DNode* next;
		DNode* prev;
		T data;

		DNode(T val = T()) {
			data = val;
			next = prev = this;
		}

	};

	//create an empty list:  PROVIDED
	DLinkedList() {
		//create the header
		header = new DNode();
	}

	//add method  PROVIDED
	DNode* add(T item) {
		//add a new node and return a 
		//pointer to this node
		DNode* newNode = new DNode(item);
		newNode->prev = header;
		newNode->next = header->next;
		header->next->prev = newNode;
		header->next = newNode;
		return newNode;
	}

	/**
	* ASSIGNED
	* remove val from the list
	*
	* @param val
	* @return true if successful, false otherwise
	*/
	bool remove(T val) {
		DNode* dNode = new DNode(val);   // new node containing the new data
		DNode* temp = header->next;

		if (temp == NULL || dNode == NULL)
		{
			cout << "Node was not it list or the list is empty";
			return true;
		}

		else if (temp == dNode)
		{
			temp = dNode->next; //if new node is head then move header
		}

		else if (dNode->next != NULL)
		{
			dNode->next->prev = dNode->prev; //change next as long as not the last node
		}
		else if (dNode->prev != NULL)
		{
			dNode->prev->next = dNode->next; //change prev as long as not the first node
		}

		delete(dNode);
		return true;
	}


	/**
	* ASSIGNED
	*
	* @param item
	*/
	void insertOrder(T item) 
	{
			DNode* newDNode = new DNode(item);                              // new node containing the new data
			DNode* temp = header->next;                                     // temp header node

			while (temp->data <= newDNode->data && temp != header) { temp = temp->next; }    // loop to know where to insert the new data

			if (temp->next == header && temp->data <= newDNode->data) {      // checks if the data is less than the final node
				newDNode->next = temp->next;                                // inserts node before the last value
				newDNode->prev = temp;

				temp->next->prev = newDNode;
				temp->next = newDNode;
			}
			else if (temp == header && temp->data >= newDNode->data) {     // checks if the data is greater than the final node
				newDNode->next = temp;                                      // inserts node after the last value
				newDNode->prev = temp->prev;

				temp->prev->next = newDNode;
				temp->prev = newDNode;
				header = newDNode;                                          // reassign header node
			}
			else {                                                        // inserts node for all other cases
				newDNode->next = temp;
				newDNode->prev = temp->prev;

				temp->prev->next = newDNode;
				temp->prev = newDNode;
			}
	}

	/**
	* ASSIGNED
	*
	* @param item
	*/
	bool insertOrderUnique(T item) {
		DNode* newDNode = new DNode(item);  // new node containing the new data
		DNode* temp = header->next;       // temp header node

		while (temp->data <= newDNode->data && temp != header) 
		{ 
			if (temp->data == newDNode->data && temp != header) //check to see if the data is not unique
			{
				return true; //exit method
			}
			temp = temp->next; 
		}    // loop to know where to insert the new data

		if (temp->next == header && temp->data < newDNode->data) 
		{      // checks if the data is less than the final node
			newDNode->next = temp->next;                                // inserts node before the last value
			newDNode->prev = temp;

			temp->next->prev = newDNode;
			temp->next = newDNode;
		}
		else if (temp == header && temp->data > newDNode->data) 
		{     // checks if the data is greater than the final node
			newDNode->next = temp;                                      // inserts node after the last value
			newDNode->prev = temp->prev;

			temp->prev->next = newDNode;
			temp->prev = newDNode;
			header = newDNode;                                          // reassign header node
		}
		else {                                                        // inserts node for all other cases
			newDNode->next = temp;
			newDNode->prev = temp->prev;

			temp->prev->next = newDNode;
			temp->prev = newDNode;
		}
		return true;
	}

	/**
	* ASSIGNED
	* PRE:  this and rhs are sorted lists
	* @param rhs
	* @return list that contains this and rhs merged into a sorted list
	* POST:  returned list will not contain duplicates, both rhs and this
	* will have no elements
	*/
	DLinkedList merge(DLinkedList result, DLinkedList rhs)
	{
			DNode* temp = header->next;
			DNode* newDNode = rhs.header->next;  // new node containing the new data

			if (temp == NULL)
			{
				return result;
			}
			if (newDNode == NULL)
			{
				return result;
			}

			result.insertOrderUnique(temp->data);
			result.insertOrderUnique(newDNode->data);

			remove(temp->data);
			rhs.remove(newDNode->data);
		
			merge(result, rhs);


			/*
			DNode* newHeader = NULL;
			DNode* tail = NULL;
			DNode* temp = header->next;
			DNode* rhsTemp = rhs;

			if (temp->data < rhsTemp->data)
			{
				newHeader = temp;
				tail = newHeader;
				temp = temp->next;
			}
			else
			{
				newHeader = rhsTemp;
				tail = newHeader;
				rhsTemp = rhsTemp->next;
			}

			while (temp != NULL && rhsTemp != NULL)
			{
				if (temp->data < rhsTemp->data)
				{
					tail->next = temp;
					tail = temp;
					temp = temp->next;
				}
				else
				{
					tail->next = rhsTemp;
					tail = rhsTemp;
					rhsTemp = rhsTemp->next;
				}
			}

			if (temp != NULL) { tail->next = temp; }
			if (rhsTemp != NULL) { tail->next = rhsTemp; }

			return newHeader;
			*/
		return result;
		

	}

private:
	//DLinkedList fields:  PROVIDED
	DNode* header;

};


#endif